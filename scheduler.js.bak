/**
 * Scheduler module for Ghost Discord Bot
 * Handles periodic checking for new and updated posts
 */
const db = require('./database.js');
const ghostApi = require('./ghostApi.js');
const { EmbedBuilder } = require('discord.js');
const logger = require('./handlers/logger');

/**
 * Check for new posts across all configured guilds
 * @param {Object} client - Discord.js client
 * @param {string} [guildId] - Optional guild ID to check only one server
 * @param {boolean} [manual] - Whether this is a manual check
 * @returns {Promise<Object>} - Statistics about the check
 */
async function checkPosts(client, guildId = null, manual = false) {
    logger.info(`Checking for new posts... ${guildId ? `for guild ${guildId}` : 'for all guilds'} ${manual ? '(manual)' : ''}`);
    
    // Get configurations for guilds to check
    const guilds = guildId ? [db.getGuildConfig(guildId)] : db.getAllGuildConfigs();
    
    // Initialize stats object
    const stats = {
        checked: 0,
        newPosts: 0,
        updatedPosts: 0,
        sent: 0,
        errors: 0
    };

    for (const guildConfig of guilds) {
        // Skip invalid configurations or those with no API setup
        if (!guildConfig || !guildConfig.url || !guildConfig.apiKey) continue;
        
        stats.checked++;
        
        try {
            // Get posts from Ghost API
            const url = guildConfig.url || guildConfig.apiUrl; // Support legacy config
            const posts = await ghostApi.getRecentPosts(url, guildConfig.apiKey);
            if (!posts || posts.length === 0) continue;
            
            // Process newest posts first (reverse chronological order)
            for (const post of posts.reverse()) {
                // Check if this post has been published before
                const publishedPost = db.getPublishedPost(post.id, guildConfig.id);
                
                // Determine if we should announce this post
                const shouldAnnounce = guildConfig.announcementsEnabled !== undefined
                    ? guildConfig.announcementsEnabled
                    : !!guildConfig.channelId;
                
                // Skip announcement if announcements are disabled
                if (!shouldAnnounce) {
                    // Just track the post silently if it's new
                    if (!publishedPost) {
                        db.setPostAsPublished(
                            post.id, 
                            guildConfig.id, 
                            new Date(post.published_at).getTime(), 
                            new Date(post.updated_at).getTime()
                        );
                    }
                    continue;
                }
                
                // Skip if no channel is configured
                if (!guildConfig.channelId) continue;
                
                // Handle new post
                if (!publishedPost) {
                    stats.newPosts++;
                    
                    try {
                        const channel = await client.channels.fetch(guildConfig.channelId);
                        if (channel) {
                            const publishedDate = new Date(post.published_at);
                            const embed = new EmbedBuilder()
                                .setColor('#00FF00')
                                .setTitle(post.title)
                                .setURL(post.url)
                                .setAuthor({ 
                                    name: post.primary_author?.name || 'Unknown Author', 
                                    iconURL: post.primary_author?.profile_image, 
                                    url: post.primary_author?.url 
                                })
                                .setFooter({ text: `Published on ${publishedDate.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}` })
                                .setTimestamp(publishedDate)
                                .setDescription(post.excerpt || 'No excerpt available');
                                
                            if (post.feature_image) {
                                embed.setImage(post.feature_image);
                            }
                            
                            // Include tags if available
                            if (post.tags && post.tags.length > 0) {
                                const tagList = post.tags.map(tag => tag.name).join(', ');
                                embed.addFields({ name: 'Tags', value: tagList });
                            }
                            
                            const messageContent = guildConfig.roleId ? `<@&${guildConfig.roleId}>` : '';
                            await channel.send({ content: messageContent, embeds: [embed] });
                            stats.sent++;
                            
                            logger.info(`Posted new article "${post.title}" to ${guildConfig.id}`);
                            
                            // Mark as published
                            db.setPostAsPublished(
                                post.id, 
                                guildConfig.id, 
                                new Date(post.published_at).getTime(), 
                                new Date(post.updated_at).getTime()
                            );
                        }
                    } catch (error) {
                        logger.error(`Error posting new article to guild ${guildConfig.id}`, error);
                        stats.errors++;
                    }
                } 
                // Handle updated post
                else if ((guildConfig.mode === 'new_and_updated' || guildConfig.mode === 'default') && 
                         new Date(post.updated_at).getTime() > publishedPost.updatedAt) {
                    stats.updatedPosts++;
                    
                    try {
                        const channel = await client.channels.fetch(guildConfig.channelId);
                        if (channel) {
                            const updatedDate = new Date(post.updated_at);
                            const embed = new EmbedBuilder()
                                .setColor('#FFFF00')
                                .setTitle(`Post Updated: ${post.title}`)
                                .setURL(post.url)
                                .setAuthor({ 
                                    name: post.primary_author?.name || 'Unknown Author', 
                                    iconURL: post.primary_author?.profile_image, 
                                    url: post.primary_author?.url 
                                })
                                .setFooter({ text: `Updated on ${updatedDate.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}` })
                                .setTimestamp(updatedDate)
                                .setDescription(post.excerpt || 'No excerpt available');
                                
                            if (post.feature_image) {
                                embed.setImage(post.feature_image);
                            }
                            
                            const messageContent = guildConfig.roleId ? `<@&${guildConfig.roleId}>` : '';
                    await channel.send({ content: messageContent, embeds: [embed] });
                    db.setPostAsPublished(post.id, guildConfig.id, new Date(post.published_at).getTime(), new Date(post.updated_at).getTime());
                }
            }
        }
    }
}

function start(client) {
    checkPosts(client);
    setInterval(() => checkPosts(client), 5 * 60 * 1000); // Every 5 minutes
}

module.exports = { start, checkPosts };